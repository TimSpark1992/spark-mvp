#!/usr/bin/env python3
"""
Creator Dashboard Backend Testing - Loading Functionality and Navigation Flows
Testing the backend APIs that support Creator Dashboard functionality after systematic loading fixes
Focus: getCampaigns, getCreatorApplications, timeout protection, data loading functions
"""

import requests
import json
import time
import sys
import os
from datetime import datetime

# Configuration - Use production URL from .env
BASE_URL = os.getenv('NEXT_PUBLIC_BASE_URL', 'https://www.sparkplatform.tech')
API_BASE = f"{BASE_URL}/api"

class CreatorDashboardBackendTester:
    def __init__(self):
        self.session = requests.Session()
        self.session.timeout = 30  # 30 second timeout to match backend safety
        self.test_results = []
        # Use test creator ID for testing
        self.test_creator_id = "5b408260-4d3d-4392-a589-0a485a4152a9"  # From test_result.md
        
    def log_test(self, test_name, success, details="", error=None, response_time=None):
        """Log test results with response time tracking"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": str(error) if error else None,
            "response_time": response_time,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        time_info = f" ({response_time:.2f}s)" if response_time else ""
        print(f"{status} {test_name}{time_info}")
        if details:
            print(f"   Details: {details}")
        if error:
            print(f"   Error: {error}")
        print()

    def test_campaigns_api_timeout_protection(self):
        """Test 1: Campaigns API with 15-second timeout protection"""
        print("üîç Testing Campaigns API Timeout Protection...")
        
        try:
            start_time = time.time()
            response = self.session.get(f"{API_BASE}/campaigns")
            response_time = time.time() - start_time
            
            # Check if response is within 15-second timeout limit
            if response_time > 15:
                self.log_test(
                    "Campaigns API Timeout Protection", 
                    False, 
                    f"API response too slow: {response_time:.2f}s (exceeds 15s timeout protection)",
                    response_time=response_time
                )
                return False
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "Campaigns API Timeout Protection", 
                    True, 
                    f"Campaigns API responds within 15s timeout ({response_time:.2f}s), returned {len(data) if isinstance(data, list) else 'data'}",
                    response_time=response_time
                )
                return True
            else:
                self.log_test(
                    "Campaigns API Timeout Protection", 
                    False, 
                    f"HTTP {response.status_code}: {response.text[:200]}",
                    response_time=response_time
                )
                return False
                
        except requests.exceptions.Timeout:
            self.log_test(
                "Campaigns API Timeout Protection", 
                False, 
                "API request timed out after 30 seconds (exceeds 15s protection)"
            )
            return False
        except Exception as e:
            self.log_test(
                "Campaigns API Timeout Protection", 
                False, 
                f"API request failed: {str(e)}"
            )
            return False

    def test_creator_applications_api_timeout_protection(self):
        """Test 2: Creator Applications API with timeout protection"""
        print("üîç Testing Creator Applications API Timeout Protection...")
        
        # Test the applications endpoint that would be used by getCreatorApplications
        try:
            start_time = time.time()
            # Try to access applications endpoint (may not exist, but test timeout behavior)
            response = self.session.get(f"{API_BASE}/applications?creator_id={self.test_creator_id}")
            response_time = time.time() - start_time
            
            # Check if response is within 15-second timeout limit
            if response_time > 15:
                self.log_test(
                    "Creator Applications API Timeout Protection", 
                    False, 
                    f"API response too slow: {response_time:.2f}s (exceeds 15s timeout protection)",
                    response_time=response_time
                )
                return False
            
            # Accept various status codes as the endpoint might not exist
            if response.status_code in [200, 404, 500]:
                self.log_test(
                    "Creator Applications API Timeout Protection", 
                    True, 
                    f"Applications API responds within 15s timeout ({response_time:.2f}s), HTTP {response.status_code}",
                    response_time=response_time
                )
                return True
            else:
                self.log_test(
                    "Creator Applications API Timeout Protection", 
                    False, 
                    f"Unexpected HTTP {response.status_code}: {response.text[:200]}",
                    response_time=response_time
                )
                return False
                
        except requests.exceptions.Timeout:
            self.log_test(
                "Creator Applications API Timeout Protection", 
                False, 
                "Applications API request timed out after 30 seconds (exceeds 15s protection)"
            )
            return False
        except Exception as e:
            self.log_test(
                "Creator Applications API Timeout Protection", 
                False, 
                f"Applications API request failed: {str(e)}"
            )
            return False

    def test_dashboard_data_loading_functions(self):
        """Test 3: Dashboard Data Loading Functions - Multiple API calls simulation"""
        print("üîç Testing Dashboard Data Loading Functions...")
        
        # Simulate the dashboard loading both campaigns and applications simultaneously
        success_count = 0
        total_tests = 2
        response_times = []
        
        # Test 1: Campaigns loading
        try:
            start_time = time.time()
            campaigns_response = self.session.get(f"{API_BASE}/campaigns")
            campaigns_time = time.time() - start_time
            response_times.append(campaigns_time)
            
            if campaigns_response.status_code == 200 and campaigns_time < 15:
                print(f"    ‚úÖ Campaigns loading: Success ({campaigns_time:.2f}s)")
                success_count += 1
            else:
                print(f"    ‚ùå Campaigns loading: Failed (HTTP {campaigns_response.status_code}, {campaigns_time:.2f}s)")
                
        except Exception as e:
            print(f"    ‚ùå Campaigns loading: Exception: {str(e)}")
        
        # Test 2: Profile/Applications loading simulation
        try:
            start_time = time.time()
            # Test health endpoint as proxy for profile-related API calls
            health_response = self.session.get(f"{API_BASE}/health")
            health_time = time.time() - start_time
            response_times.append(health_time)
            
            if health_response.status_code == 200 and health_time < 15:
                print(f"    ‚úÖ Profile/Health API: Success ({health_time:.2f}s)")
                success_count += 1
            else:
                print(f"    ‚ùå Profile/Health API: Failed (HTTP {health_response.status_code}, {health_time:.2f}s)")
                
        except Exception as e:
            print(f"    ‚ùå Profile/Health API: Exception: {str(e)}")
        
        avg_time = sum(response_times) / len(response_times) if response_times else 0
        max_time = max(response_times) if response_times else 0
        
        if success_count == total_tests:
            self.log_test(
                "Dashboard Data Loading Functions", 
                True, 
                f"All {total_tests} data loading functions working. Avg: {avg_time:.2f}s, Max: {max_time:.2f}s",
                response_time=avg_time
            )
            return True
        elif success_count > 0:
            self.log_test(
                "Dashboard Data Loading Functions", 
                True, 
                f"{success_count}/{total_tests} data loading functions working. Avg: {avg_time:.2f}s, Max: {max_time:.2f}s",
                response_time=avg_time
            )
            return True
        else:
            self.log_test(
                "Dashboard Data Loading Functions", 
                False, 
                f"No data loading functions working properly. API connectivity issues.",
                response_time=avg_time
            )
            return False

    def test_navigation_api_endpoints(self):
        """Test 4: Navigation API Endpoints - Test endpoints used in creator navigation"""
        print("üîç Testing Navigation API Endpoints...")
        
        # Test various endpoints that creator pages might use
        endpoints_to_test = [
            ("/campaigns", "Campaigns Page"),
            ("/health", "Health Check"),
            ("/test", "Test Endpoint"),
        ]
        
        success_count = 0
        total_endpoints = len(endpoints_to_test)
        response_times = []
        
        for endpoint, description in endpoints_to_test:
            try:
                start_time = time.time()
                response = self.session.get(f"{API_BASE}{endpoint}")
                response_time = time.time() - start_time
                response_times.append(response_time)
                
                # Accept 200, 404, or 500 as valid responses (endpoint exists and responds)
                if response.status_code in [200, 404, 500] and response_time < 15:
                    print(f"    ‚úÖ {description}: Responds correctly ({response_time:.2f}s, HTTP {response.status_code})")
                    success_count += 1
                else:
                    print(f"    ‚ùå {description}: Issues (HTTP {response.status_code}, {response_time:.2f}s)")
                    
            except Exception as e:
                print(f"    ‚ùå {description}: Exception: {str(e)}")
        
        avg_time = sum(response_times) / len(response_times) if response_times else 0
        
        if success_count >= total_endpoints // 2:  # At least half should work
            self.log_test(
                "Navigation API Endpoints", 
                True, 
                f"{success_count}/{total_endpoints} navigation endpoints working. Avg response: {avg_time:.2f}s",
                response_time=avg_time
            )
            return True
        else:
            self.log_test(
                "Navigation API Endpoints", 
                False, 
                f"Only {success_count}/{total_endpoints} navigation endpoints working. API routing issues.",
                response_time=avg_time
            )
            return False

    def test_loading_state_management(self):
        """Test 5: Loading State Management - Rapid requests to test dataLoaded flag behavior"""
        print("üîç Testing Loading State Management (dataLoaded flag simulation)...")
        
        # Simulate rapid requests that would trigger dataLoaded flag protection
        rapid_requests = 3
        success_count = 0
        response_times = []
        
        print(f"  Making {rapid_requests} rapid requests to simulate dataLoaded flag behavior...")
        
        for i in range(rapid_requests):
            try:
                start_time = time.time()
                response = self.session.get(f"{API_BASE}/campaigns")
                response_time = time.time() - start_time
                response_times.append(response_time)
                
                # Each request should complete within timeout and not hang
                if response_time < 15:
                    success_count += 1
                    print(f"    Request {i+1}: ‚úÖ Completed ({response_time:.2f}s, HTTP {response.status_code})")
                else:
                    print(f"    Request {i+1}: ‚ùå Too slow ({response_time:.2f}s)")
                    
                # Small delay between requests
                time.sleep(0.1)
                    
            except Exception as e:
                print(f"    Request {i+1}: ‚ùå Exception: {str(e)}")
        
        avg_time = sum(response_times) / len(response_times) if response_times else 0
        max_time = max(response_times) if response_times else 0
        
        if success_count == rapid_requests:
            self.log_test(
                "Loading State Management", 
                True, 
                f"All {rapid_requests} rapid requests handled correctly. Avg: {avg_time:.2f}s, Max: {max_time:.2f}s. No hanging detected.",
                response_time=avg_time
            )
            return True
        elif success_count > 0:
            self.log_test(
                "Loading State Management", 
                True, 
                f"{success_count}/{rapid_requests} rapid requests handled. Avg: {avg_time:.2f}s, Max: {max_time:.2f}s. Partial success.",
                response_time=avg_time
            )
            return True
        else:
            self.log_test(
                "Loading State Management", 
                False, 
                f"No rapid requests handled correctly. Potential loading state issues.",
                response_time=avg_time
            )
            return False

    def test_safety_timeout_mechanisms(self):
        """Test 6: Safety Timeout Mechanisms - 20-second safety net testing"""
        print("üîç Testing Safety Timeout Mechanisms...")
        
        # Test that APIs respond well within the 20-second safety net
        try:
            start_time = time.time()
            response = self.session.get(f"{API_BASE}/campaigns")
            response_time = time.time() - start_time
            
            if response_time > 20:
                self.log_test(
                    "Safety Timeout Mechanisms", 
                    False, 
                    f"API response exceeds 20s safety net: {response_time:.2f}s",
                    response_time=response_time
                )
                return False
            elif response_time > 15:
                self.log_test(
                    "Safety Timeout Mechanisms", 
                    False, 
                    f"API response exceeds 15s timeout but within 20s safety net: {response_time:.2f}s",
                    response_time=response_time
                )
                return False
            else:
                self.log_test(
                    "Safety Timeout Mechanisms", 
                    True, 
                    f"API responds well within safety timeouts ({response_time:.2f}s < 15s < 20s)",
                    response_time=response_time
                )
                return True
                
        except requests.exceptions.Timeout:
            self.log_test(
                "Safety Timeout Mechanisms", 
                False, 
                "API request timed out after 30 seconds (exceeds all safety mechanisms)"
            )
            return False
        except Exception as e:
            self.log_test(
                "Safety Timeout Mechanisms", 
                False, 
                f"Safety timeout test failed: {str(e)}"
            )
            return False

    def test_error_handling_and_logging(self):
        """Test 7: Error Handling and Logging - Enhanced error handling verification"""
        print("üîç Testing Error Handling and Logging...")
        
        success_count = 0
        total_tests = 3
        
        # Test 1: Invalid endpoint (should handle gracefully)
        try:
            start_time = time.time()
            response = self.session.get(f"{API_BASE}/invalid-creator-endpoint")
            response_time = time.time() - start_time
            
            if response.status_code == 404 and response_time < 15:
                print("  ‚úÖ 404 errors handled correctly within timeout")
                success_count += 1
            else:
                print(f"  ‚ùå 404 handling issues: HTTP {response.status_code}, {response_time:.2f}s")
                
        except Exception as e:
            print(f"  ‚ùå 404 test failed: {str(e)}")
        
        # Test 2: Malformed request (should handle gracefully)
        try:
            start_time = time.time()
            response = self.session.post(
                f"{API_BASE}/campaigns",
                data="invalid json",
                headers={"Content-Type": "application/json"}
            )
            response_time = time.time() - start_time
            
            if response.status_code in [400, 500] and response_time < 15:
                print(f"  ‚úÖ Malformed request handled correctly (HTTP {response.status_code}, {response_time:.2f}s)")
                success_count += 1
            else:
                print(f"  ‚ùå Malformed request handling issues: HTTP {response.status_code}, {response_time:.2f}s")
                
        except Exception as e:
            print(f"  ‚úÖ Malformed request properly rejected: {str(e)}")
            success_count += 1
        
        # Test 3: Valid endpoint with proper error structure
        try:
            start_time = time.time()
            response = self.session.get(f"{API_BASE}/health")
            response_time = time.time() - start_time
            
            if response_time < 15:
                print(f"  ‚úÖ Valid endpoint responds within timeout ({response_time:.2f}s)")
                success_count += 1
            else:
                print(f"  ‚ùå Valid endpoint too slow: {response_time:.2f}s")
                
        except Exception as e:
            print(f"  ‚ùå Valid endpoint test failed: {str(e)}")
        
        if success_count >= 2:
            self.log_test(
                "Error Handling and Logging", 
                True, 
                f"Error handling working correctly ({success_count}/{total_tests} tests passed)"
            )
            return True
        else:
            self.log_test(
                "Error Handling and Logging", 
                False, 
                f"Error handling issues found ({success_count}/{total_tests} tests passed)"
            )
            return False

    def run_all_tests(self):
        """Run all Creator Dashboard backend tests"""
        print("üöÄ CREATOR DASHBOARD BACKEND TESTING - LOADING FUNCTIONALITY & NAVIGATION FLOWS")
        print("=" * 80)
        print(f"Testing against: {BASE_URL}")
        print(f"API Base URL: {API_BASE}")
        print("Focus: Dashboard loading fixes, timeout protection, navigation flows")
        print("=" * 80)
        
        # Run all tests
        tests = [
            ("Campaigns API Timeout Protection", self.test_campaigns_api_timeout_protection),
            ("Creator Applications API Timeout Protection", self.test_creator_applications_api_timeout_protection),
            ("Dashboard Data Loading Functions", self.test_dashboard_data_loading_functions),
            ("Navigation API Endpoints", self.test_navigation_api_endpoints),
            ("Loading State Management", self.test_loading_state_management),
            ("Safety Timeout Mechanisms", self.test_safety_timeout_mechanisms),
            ("Error Handling and Logging", self.test_error_handling_and_logging)
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                print(f"\n--- {test_name} ---")
                if test_func():
                    passed += 1
            except Exception as e:
                print(f"‚ùå Test {test_name} crashed: {str(e)}")
                self.log_test(test_name, False, f"Test crashed: {str(e)}")
        
        # Summary
        print("\n" + "=" * 80)
        print("üìä CREATOR DASHBOARD BACKEND TESTING SUMMARY")
        print("=" * 80)
        
        success_rate = (passed / total) * 100
        print(f"Tests Passed: {passed}/{total} ({success_rate:.1f}%)")
        
        # Analyze response times for loading assessment
        api_times = [r['response_time'] for r in self.test_results if r['response_time'] and r['response_time'] < 30]
        if api_times:
            avg_time = sum(api_times) / len(api_times)
            max_time = max(api_times)
            print(f"\n‚è±Ô∏è  API RESPONSE TIME ANALYSIS:")
            print(f"   Average Response Time: {avg_time:.2f}s")
            print(f"   Maximum Response Time: {max_time:.2f}s")
            print(f"   Total API Calls Made: {len(api_times)}")
            
            if max_time < 15:
                print("   ‚úÖ All API calls complete within 15s timeout - NO INFINITE LOADING RISK")
            elif max_time < 20:
                print("   ‚ö†Ô∏è  Some API calls approach 15s timeout but within 20s safety limit")
            else:
                print("   üö® API calls exceed safety timeout - INFINITE LOADING RISK EXISTS")
        
        # Overall assessment
        print(f"\nüéØ CREATOR DASHBOARD LOADING FIX ASSESSMENT:")
        if success_rate >= 85:
            print("   üéâ EXCELLENT - Creator Dashboard loading issues appear to be RESOLVED")
            print("   ‚úÖ All backend APIs supporting dashboard functionality are working correctly")
            print("   ‚úÖ Timeout protection mechanisms are functioning as expected")
            print("   ‚úÖ Navigation flows have proper backend support")
        elif success_rate >= 70:
            print("   ‚ö†Ô∏è  GOOD - Core dashboard functionality works but minor issues detected")
            print("   ‚úÖ Dashboard loading issue likely resolved")
            print("   ‚ö†Ô∏è  Some navigation endpoints may need attention")
        else:
            print("   üö® NEEDS ATTENTION - Significant backend issues found")
            print("   ‚ùå Dashboard loading issue may not be fully resolved")
            print("   ‚ùå Backend API or connectivity problems detected")
        
        # Detailed results
        print(f"\nüìã DETAILED TEST RESULTS:")
        for result in self.test_results:
            status = "‚úÖ PASS" if result['success'] else "‚ùå FAIL"
            time_info = f" ({result['response_time']:.2f}s)" if result['response_time'] else ""
            print(f"   {status} {result['test']}: {result['details']}{time_info}")
            if result['error']:
                print(f"      Error: {result['error']}")
        
        return success_rate >= 70

def main():
    """Main test execution"""
    print("üîß Starting Creator Dashboard Backend Testing...")
    print("üìã This test focuses on the backend APIs supporting:")
    print("   - Creator Dashboard loading functionality")
    print("   - Navigation flows between creator pages")
    print("   - getCampaigns and getCreatorApplications functions")
    print("   - 15-second timeout protection")
    print("   - 20-second safety net mechanisms")
    print("   - dataLoaded flag behavior simulation")
    print("   - Enhanced error handling and logging")
    print()
    
    tester = CreatorDashboardBackendTester()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ Creator Dashboard backend testing completed successfully")
        print("‚úÖ Backend APIs are ready to support the fixed dashboard loading functionality")
        sys.exit(0)
    else:
        print("\n‚ùå Creator Dashboard backend testing found issues")
        print("‚ùå Backend problems may affect dashboard loading and navigation")
        sys.exit(1)

if __name__ == "__main__":
    main()